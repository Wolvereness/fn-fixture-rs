fn parse_signed_number(
    mut value: (impl std::ops::Fn(&mut std::option::Option<&str>)
                    + std::panic::RefUnwindSafe
                    + std::panic::UnwindSafe,
                &'static str,
                &'static str),
) {
    fn parse_signed_number(value: &str) -> Result<isize, impl std::fmt::Debug> {
        value.parse()
    }
    let (to_call, (provider, expected_file, actual_file)) = (&parse_signed_number, value);
    let result = format!(
        "{:#?}\n",
        std::panic::catch_unwind(move || {
            let mut temp = std::option::Option::None;
            provider(&mut temp);
            to_call(temp.unwrap())
        }).map_err(|err| {
            err.downcast::<String>()
                .or_else(|err| if let Some(string) = err.downcast_ref::<&str>() {
                    std::result::Result::Ok(std::boxed::Box::new(string.to_string()))
                } else {
                    std::result::Result::Err(("<!String> Panic", err))
                })
                .map(|ok| ("<String> Panic", ok))
        })
    );
    if std::path::Path::new(expected_file).is_file() {
        let expected = std::fs::read_to_string(expected_file).unwrap_or_else(|err| {
            panic!("Reading expected from {}: {:?}", expected_file, err)
        });
        assert_eq!(result, expected)
    } else {
        std::fs::write(actual_file, result.as_bytes())
            .unwrap_or_else(|err| panic!("Writing actual to {}: {:?}", actual_file, err));
        panic!("No expected value set: {}", actual_file)
    }
}
mod parse_signed_number {
    #[test]
    fn bad_number() {
        super::parse_signed_number((
            |bad_number: &mut std::option::Option<_>| {
                bad_number . replace ( include_str ! ( "./snapshot-tests/examples/bad_number/input.txt" ) ) ;
            },
            "./snapshot-tests/examples/bad_number/parse_signed_number.txt",
            "./snapshot-tests/examples/bad_number/parse_signed_number.actual.txt",
        ))
    }
    #[test]
    fn good_number() {
        super::parse_signed_number((
            |good_number: &mut std::option::Option<_>| {
                good_number . replace ( include_str ! ( "./snapshot-tests/examples/good_number/input.txt" ) ) ;
            },
            "./snapshot-tests/examples/good_number/parse_signed_number.txt",
            "./snapshot-tests/examples/good_number/parse_signed_number.actual.txt",
        ))
    }
    #[test]
    fn sometimes_number() {
        super::parse_signed_number((
            |sometimes_number: &mut std::option::Option<_>| {
                sometimes_number . replace ( include_str ! ( "./snapshot-tests/examples/sometimes_number/input.txt" ) ) ;
            },
            "./snapshot-tests/examples/sometimes_number/parse_signed_number.txt",
            "./snapshot-tests/examples/sometimes_number/parse_signed_number.actual.txt",
        ))
    }
}
