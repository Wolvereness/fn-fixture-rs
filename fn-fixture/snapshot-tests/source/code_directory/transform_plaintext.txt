fn do_thing<T: std::fmt::Debug>(
    mut input: (impl std::ops::Fn(&mut std::option::Option<T>)
                    + std::panic::RefUnwindSafe
                    + std::panic::UnwindSafe,
                &'static str,
                &'static str),
) {
    fn do_thing<T: std::fmt::Debug>(input: T) -> T {
        input
    }
    let (to_call, (provider, expected_file, actual_file)) = (&do_thing, input);
    let result = format!(
        "{:#?}\n",
        std::panic::catch_unwind(move || {
            let mut temp = std::option::Option::None;
            provider(&mut temp);
            to_call(temp.unwrap())
        }).map_err(|err| {
            err.downcast::<String>()
                .or_else(|err| if let Some(string) = err.downcast_ref::<&str>() {
                    std::result::Result::Ok(std::boxed::Box::new(string.to_string()))
                } else {
                    std::result::Result::Err(("<!String> Panic", err))
                })
                .map(|ok| ("<String> Panic", ok))
        })
    );
    if std::path::Path::new(expected_file).is_file() {
        let expected = std::fs::read_to_string(expected_file).unwrap_or_else(|err| {
            panic!("Reading expected from {}: {:?}", expected_file, err)
        });
        assert_eq!(result, expected)
    } else {
        std::fs::write(actual_file, result.as_bytes())
            .unwrap_or_else(|err| panic!("Writing actual to {}: {:?}", actual_file, err));
        panic!("No expected value set: {}", actual_file)
    }
}
mod do_thing {
    mod panics {
        #[test]
        fn TestPanic() {
            super::super::do_thing((
                |TestPanic: &mut std::option::Option<_>| {
                    TestPanic . replace ( include ! ( "./snapshot-tests/code/panics/TestPanic/input.rs" ) ) ;
                },
                "./snapshot-tests/code/panics/TestPanic/do_thing.txt",
                "./snapshot-tests/code/panics/TestPanic/do_thing.actual.txt",
            ))
        }
        #[test]
        fn TestPanicObject() {
            super::super::do_thing((
                |TestPanicObject: &mut std::option::Option<_>| {
                    TestPanicObject . replace ( include ! ( "./snapshot-tests/code/panics/TestPanicObject/input.rs" ) ) ;
                },
                "./snapshot-tests/code/panics/TestPanicObject/do_thing.txt",
                "./snapshot-tests/code/panics/TestPanicObject/do_thing.actual.txt",
            ))
        }
        #[test]
        fn TestPanic_IO() {
            super::super::do_thing((
                |TestPanic_IO: &mut std::option::Option<_>| {
                    TestPanic_IO . replace ( include ! ( "./snapshot-tests/code/panics/TestPanic_IO/input.rs" ) ) ;
                },
                "./snapshot-tests/code/panics/TestPanic_IO/do_thing.txt",
                "./snapshot-tests/code/panics/TestPanic_IO/do_thing.actual.txt",
            ))
        }
    }
    mod plain_value {
        #[test]
        fn binary() {
            super::super::do_thing((
                |binary: &mut std::option::Option<_>| {
                    binary . replace ( include_bytes ! ( "./snapshot-tests/code/plain_value/binary/input.bin" ) ) ;
                },
                "./snapshot-tests/code/plain_value/binary/do_thing.txt",
                "./snapshot-tests/code/plain_value/binary/do_thing.actual.txt",
            ))
        }
        #[test]
        fn plaintext() {
            super::super::do_thing((
                |plaintext: &mut std::option::Option<_>| {
                    plaintext . replace ( include_str ! ( "./snapshot-tests/code/plain_value/plaintext/input.txt" ) ) ;
                },
                "./snapshot-tests/code/plain_value/plaintext/do_thing.txt",
                "./snapshot-tests/code/plain_value/plaintext/do_thing.actual.txt",
            ))
        }
        #[test]
        fn rust_complex_bufread() {
            super::super::do_thing((
                |rust_complex_bufread: &mut std::option::Option<_>| {
                    rust_complex_bufread . replace ( include ! ( "./snapshot-tests/code/plain_value/rust_complex_bufread/input.rs" ) ) ;
                },
                "./snapshot-tests/code/plain_value/rust_complex_bufread/do_thing.txt",
                "./snapshot-tests/code/plain_value/rust_complex_bufread/do_thing.actual.txt",
            ))
        }
        #[test]
        fn rust_complex_primes() {
            super::super::do_thing((
                |rust_complex_primes: &mut std::option::Option<_>| {
                    rust_complex_primes . replace ( include ! ( "./snapshot-tests/code/plain_value/rust_complex_primes/input.rs" ) ) ;
                },
                "./snapshot-tests/code/plain_value/rust_complex_primes/do_thing.txt",
                "./snapshot-tests/code/plain_value/rust_complex_primes/do_thing.actual.txt",
            ))
        }
        #[test]
        fn rust_number() {
            super::super::do_thing((
                |rust_number: &mut std::option::Option<_>| {
                    rust_number . replace ( include ! ( "./snapshot-tests/code/plain_value/rust_number/input.rs" ) ) ;
                },
                "./snapshot-tests/code/plain_value/rust_number/do_thing.txt",
                "./snapshot-tests/code/plain_value/rust_number/do_thing.actual.txt",
            ))
        }
        #[test]
        fn rust_string() {
            super::super::do_thing((
                |rust_string: &mut std::option::Option<_>| {
                    rust_string . replace ( include ! ( "./snapshot-tests/code/plain_value/rust_string/input.rs" ) ) ;
                },
                "./snapshot-tests/code/plain_value/rust_string/do_thing.txt",
                "./snapshot-tests/code/plain_value/rust_string/do_thing.actual.txt",
            ))
        }
    }
}
